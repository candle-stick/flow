# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_adapters.ipynb (unless otherwise specified).

__all__ = ['Templater', 'JinjaTemplater']

# Cell
from dpcontracts import require, types, ensure
from typing_extensions import Protocol
from jinja2 import Environment, PackageLoader, Template

# Cell
class Templater(Protocol):
    def get_template(self, filename: str):
        ...

    def render(self, template: str, content: dict) -> str:
        ...


# Cell
class JinjaTemplater:

    def __init__(self):
        self.env = Environment(loader = PackageLoader('flow', 'templates'),
                               trim_blocks = True)

    @ensure("Must return Template object", lambda args, result: isinstance(result, Template))
    def get_template(self, filename):
        return self.env.get_template(filename)

    @types(template=str, content=dict)
    @ensure("Must return string", lambda args, result: isinstance(result, str))
    def render(self, template, content) -> str:
        template = self.get_template(template)
        return template.render(content)